//
// Firefox
//

// ==UserScript==
// @name        Database Info Page
// @namespace   NNN
// @include     http://www...
// @version     1
// @grant       none
// ==/UserScript==

window.onload = function() { // In Google Chrome (cjs) run the next code outside of window.onload;
                             // also replace /(<input name="queries")/g to /(<input type="radio")/g
                             // and /(<br>)/g to /(<br \/>)/g
                             //
                             // In Mozilla Firefox (Grease Monkey) add the script when no other tabs are opened
                             // (if use with 'Higlight Links' script).

   document.title = "Databases Info Page"; // Also can be run outside of window.onload.


   var fr0 = document.querySelector('frame');
   fr0.id = 'fr0';
   fr0 = document.getElementById('fr0');

   var td = fr0.contentWindow.document.querySelector('td');

   // Works but is hardcoded.
   //td.innerHTML = '<form method="get" action="/cgi/directory/request.cgi" enctype="application/x-www-form-urlencoded" target="request" name="query"><select name="database"><option value=...</form>';

   td.innerHTML = td.innerHTML.replace(/(<input name="queries")/g, '<label>$1')
       .replace(/(<br>)/g, '</label>$1');
};



// ==UserScript==
// @name        Abbyy Lingvo - Remove redundant languages
// @namespace   AbbyyLingvo
// @include     http://www.lingvo.ua/*
// @version     1
// @grant       none
// ==/UserScript==
//
//
// String below (commented) is necessary.
// @require ..\scripts.jquery3.1.0.min.js
//
(function() {
    var languages = ['el', 'da', 'es', 'it', 'kk', 'zh-CN', 'la', 'nl', 'de',
                     'nb-no', 'pl', 'pt-br', 'tt', 'tr', 'hu', 'fi', 'fr'];

    function removeIt(what) {
        for(var i = 0; i < languages.length; i++) {
            var str = "#Search" + what + "Lang option[value='" + languages[i] + "']";
            $(str).remove();
        }
    }

    removeIt("Src");
    removeIt("Dest");
})();

(function(textInputId) {
    var clicks = 0;

    $(textInputId).on('click', function() {
        if (clicks == 0) {
            this.selectionStart = 0;
            this.selectionEnd = this.textLength;
            clicks = 1;
        }
        else {
            clicks = 0;
        }
    });

    $(textInputId).on('blur', function() {
        clicks = 0;
    });
})("#searchText");

(function() {
    $("[class=\"g-menubox__item submenu js-dict-menu\"]").css("visibility", "hidden");
})();



// ==UserScript==
// @name        Beautify links - www...
// @namespace   NNN
// @include     https://www...
// @version     1
// @grant       none
// ==/UserScript==

window.onload = function() {
    var st2 = document.createElement('style');
    st2.innerHTML = 'A:hover { color: #888; font-weight: normal; }';
    document.getElementsByTagName('head')[0].appendChild(st2);
}



// ==UserScript==
// @name        GitHub
// @namespace   GitHub
// @include     https://github.com/*
// @version     1
// @grant       none
// ==/UserScript==


// var commitsIndicator = document.getElementsByClassName('numbers-summary')[0].children[0].children[0];
//
// commitsIndicator.style.color = "#f66"
// commitsIndicator.style.fontSize = "1.3em";
// commitsIndicator.style.fontWeight = "900"


function styleGithub() {
    var element;

    element =
            document.getElementsByClassName('numbers-summary');

    if (   element
        && element[0]
        && element[0].children
        && element[0].children[0]
        && element[0].children[0].children) {
      element = element[0].children[0].children[0];
      element.style.color = "#f66"
      element.style.fontSize = "1.3em";
      element.style.fontWeight = "900";
    }

    element =
        document.getElementsByClassName('js-selected-navigation-item');

    if (   element
        && element[3]
        && element[3].children) {
      element = element[3].children[1];
      element.style.color = "#f66";
      element.style.fontWeight = "900";
    }
}

styleGithub();
setInterval(styleGithub, 2000);



// ==UserScript==
// @name        Google
// @namespace   google
// @include     https://www.google.com.ua/*
// @version     1
// @grant       none
// ==/UserScript==

console.log('...');

var resultsBoxes = document.getElementsByClassName('mnr-c');

for (var i = 0; i < resultsBoxes.length; i++) {
    resultsBoxes[i].style.boxShadow = '0 0px 0px rgba(0, 0, 0, 0.08), 0 0 0 0px rgba(0, 0, 0, 0.02)';
    resultsBoxes[i].style.backgroundColor = '#fafafa';
    resultsBoxes[i].style.margin = '0 0 2px';
}



// ==UserScript==
// @name        Google Translator
// @namespace   google.com
// @include     https://translate.google.com/*
// @version     1
// @grant       none
// ==/UserScript==

/* Working version 1
window.onload = function() {
  var src = document.getElementById('source');
  if (src == null) {
    console.log('************************************** null **************************************');
  }
  else {
    console.log('************************************** not null **************************************');

    var clicks = 0;

    src.onclick = function() {
      if (clicks == 0) {
        src.selectionStart = 0;
        src.selectionEnd = this.textLength;
        clicks = 1;
      }
      else {
        clicks = 0;
      }
    }

    src.onblur = function() {
      clicks = 0;
    }
  }
}
//*/

//* Working version 2
window.onload = function(id) {
    var src = document.getElementById(id);
    if (src == null) {
       return;
    }

    var clicks = 0;

    src.onclick = function() {
        if (clicks == 0) {
            src.selectionStart = 0;
            src.selectionEnd = this.textLength;
            clicks = 1;
        }
        else {
            clicks = 0;
        }
    }

    src.onblur = function() {
        clicks = 0;
    }
}('source');
//*/

/* Working version 3
(function(id) {
    var src = document.getElementById(id);
    if (src == null) {
       return;
    }

    var clicks = 0;

    src.onclick = function() {
        if (clicks == 0) {
            src.selectionStart = 0;
            src.selectionEnd = this.textLength;
            clicks = 1;
        }
        else {
            clicks = 0;
        }
    }

    src.onblur = function() {
        clicks = 0;
    }
})('source');
//*/



// ==UserScript==
// @name        Higlight Links - www...
// @namespace   NNN
// @include     http*://www...
// @version     1
// @grant       none
// ==/UserScript==

window.onload = function() {
    var allLinks = document.getElementsByTagName('a');

    function decorate(title, color) {
        var element = null;

        for (var i = 0; i < allLinks.length; i++) {
           if (allLinks[i].text == title) {
               element = allLinks[i];
               break;
           }
        }

        if (element != null) {
            element.text = '* ' + element.text;
            element.style.color = color;
            element.style["font-weight"] = 'bold';
            element.style["font-size"] = '14px';
            element.style["text-decoration"] = 'underline';
        }
    }

    decorate ('Телефонний довiдник', 'green');
    decorate ('Служба підтримки користувачів', 'red');

    //

    function appendStyle(style) {
        var st = document.createElement('style');
        st.innerHTML = style;
        document.getElementsByTagName('head')[0].appendChild(st);
    }

    appendStyle('.menu_item:hover { color: #444; font-weight: normal; text-decoration: underline }');
    appendStyle('.menu_item {padding-left: 10px;}');
    appendStyle('body, td { color: black; font-family: Century Gothic,CenturyGothic,AppleGothic,sans-serif; font-size: 14px; }');
    appendStyle('.news_header { color: black; font-size: 15px; text-decoration: none; }');
    appendStyle('a, a:hover { font-family: Century Gothic,CenturyGothic,AppleGothic,sans-serif; }');
    appendStyle('.book_link_item { font-size: 14px; }')
    appendStyle('.sign_path, .sign_path:hover { color: black; font-family: Century Gothic,CenturyGothic,AppleGothic,sans-serif; font-size: 14px; }');
    appendStyle(' .td_menu_item, .td_menu_item_icon { background-color: #fefc67; border-bottom: 1px solid #e1e1e1; color: black; }');

    //

    var a_news_header = document.getElementsByClassName('news_header');
    for (var i = 0; i < a_news_header.length; i++) {
        a_news_header[i].removeAttribute('style');
    }

    //
    // http://stackoverflow.com/questions/3387427/remove-element-by-id

    Element.prototype.remove = function() {
        this.parentElement.removeChild(this);
    }

    NodeList.prototype.remove = HTMLCollection.prototype.remove = function() {
        for(var i = this.length - 1; i >= 0; i--) {
            if(this[i] && this[i].parentElement) {
                this[i].parentElement.removeChild(this[i]);
            }
        }
    }

    document.querySelectorAll('img[src="http://www/main/img/arr1.gif"]').remove();

    //

    (function(id) {
      var src = document.getElementById(id);
      if (src == null) {
        console.log('***** null *****');
        return;
      }

      var clicks = 0;

      src.onclick = function() {
        if (clicks == 0) {
          src.selectionStart = 0;
          src.selectionEnd = this.textLength;
          clicks = 1;
        }
        else {
          clicks = 0;
        }
      }

      src.onblur = function() {
        clicks = 0;
      }
    })('query_txt');
}



// ==UserScript==
// @name        Jira Style
// @namespace   Jira
// @include     http://www/jira/*
// @version     1
// @grant       none
// ==/UserScript==

window.onload = function() {
    var st1 = document.createElement('style');
    st1.innerHTML = '.activity-name { border-bottom: 1px dashed #aaa; color: #666; min-width: 150px; }';
    document.getElementsByTagName('head')[0].appendChild(st1);

    var st2 = document.createElement('style');
    st2.innerHTML = '.activity-old-val, .activity-new-val { border-bottom: 1px dashed #aaa; min-width: 250px; }';
    document.getElementsByTagName('head')[0].appendChild(st2);

    var st3 = document.createElement('style');
    st3.innerHTML = '::-moz-selection { color: black; background: #9bf; } ::selection { color: black; background: #9bf; }';
    document.getElementsByTagName('head')[0].appendChild(st3);

    /*
    var st4 = document.createElement('style');
    st4.innerHTML = '.issue-data-block { border: 5px solid #ccc; padding: 10px; }';
    document.getElementsByTagName('head')[0].appendChild(st4);
    */

    // Next code works, but approach, that is going below, is better
    //
    // var worklogcalc = document.getElementById('worklogcalk_link');
    // worklogcalc.style.fontWeight = 'bold';
    // worklogcalc.style.color = '#ddd';
    // worklogcalc.style.backgroundColor = '#222';

    // http://stackoverflow.com/questions/11371550/change-hover-css-properties-with-javascript
    //
    var css = 'a#worklogcalk_link:hover, a#crowd_link:hover {color: #fff} a#worklogcalk_link, a#crowd_link {color: #66f; font-weight: bold;}';
    style = document.createElement('style');

    if (style.styleSheet) {
        style.styleSheet.cssText = css;
    } else {
        style.appendChild(document.createTextNode(css));
    }

    document.getElementsByTagName('head')[0].appendChild(style);
}



// ==UserScript==
// @name        Login Reminder
// @namespace   NNN
// @include     https://www/ibm/console/profileSelection
// @include     https://www/ibm/console/logon.jsp
// @version     1
// @grant       none
// ==/UserScript==

var div = document.createElement('div');
div.style.cssText = 'background-color: red; color: white; padding: 2px 2px 2px 20px';
div.innerHTML = 'Go to <a style="color: white;" href="https://www:9043/ibm/console/profileSelection">link</a> for login.';

var before = document.getElementsByTagName('form')[0];

if (before != undefined) {
  document.body.children[0].insertBefore(div, before);
}
else {
}



// ==UserScript==
// @name        scripts.test_sp_bm_mq.php - Extension
// @namespace   NNN
// @include     https://www/test_sp_bm_mq.php
// @version     1
// @grant       none
// @require     ..\scripts.library.js
// @require     ..\scripts.jquery3.1.0.min.js
// ==/UserScript==

//
// The code uses 'library.js' - see incstruction above
//


//
// ** Settings
//

//var resultsDefaults = '<p style="margin: 0;">Results:</p>';
var resultsDefaults = '';
var resultsDivHeight = '350px';
var bodyColor = '#e6f7ff';
var divColor = '#abc';
var resultsColor = '#9fb';


//
// ** Main code
//

function appendExtension(indexBefore, id, queryStrArr, encodings, defEncodingIndex, enabled, additionalArgs) {
    var encodingsTmp = encodings.slice();
    encodingsTmp.splice(encodingsTmp.length, 0, 'Default');

    var encodingsHTML = '<div style="display: inline-block;">\n';
    for (var i = 0; i < encodingsTmp.length; i++) {
        encodingsHTML += '<input type=radio name="encoding_' + id + '" id="encoding_' + id + i + '" value="' + encodingsTmp[i] +'"' + (i == defEncodingIndex ? ' checked' : '') + '>'
                       + '<label for="encoding_' + id + i + '">' + encodingsTmp[i] + '</label>'
                       + '<br/>\n';
    }
    encodingsHTML += '</div>\n';

    //var testCasesHTML = '<div style="display: inline-block;"><span style="vertical-align: middle;">...</span></div>\n';
    var testCasesHTML = '<div style="display: inline-block; vertical-align: top;">\n'
                      + '<p style="margin: 0;">&nbsp;</p>'
                      + '  <button onclick="setTestCaseFields(\'' + id + '\')">Set values</button><br/>\n'
                      + '  <button onclick="setTestCaseFields(\'' + id + '\', \'prev\', true)">Previous</button><br/>\n'
                      + '  <button onclick="setTestCaseFields(\'' + id + '\', \'next\', true)">Next</button><br/>\n'
                      + '</div>\n'
                      + '<div style="display: inline-block; vertical-align: top;">\n'
                      + '  <p style="margin: 0;">Test cases:</p>'
                      + '  <textarea style="height: 100px; width: 800px;" id="tests_' + id + '"></textarea>\n'
                      + '</div>\n';

    var extHTML = '<div>\n'
                + '<p style=\'margin: 0; color: #777; font-size: x-small;\'>' + id + '</p>\n'
                + '    <input type=submit id="process_' + id + '" value="Process"' + (!enabled ? ' disabled' : '') + '/>'
                + '    <input type=button id="clear_' + id + '" value="Clear results"/>\n'
                + '    <button onclick="resetFields(\'' + id + '\')">Reset fields</button>\n'
                + '</div>\n'
                + encodingsHTML
                + testCasesHTML
                + '<div id="results_' + id + '" style="overflow-x: auto; overflow-y: auto; background-color: ' + resultsColor + ';">' + resultsDefaults + '</div>';

    var newElement = document.createElement('div');
    newElement.innerHTML = extHTML;

    var place = document.children[0].children[1];
    var before = place.children[indexBefore];

    try {
        place.insertBefore(newElement, before);
    }
    catch (Exception) {
        log('Error while inserting extension element.');
        return;
    }

    var toCookiesRE = /\n/g;
    var cookieReplacementString = '@@@@';
    var fromCookiesRE = new RegExp(cookieReplacementString, 'g');

    $('#' + 'tests_' + id).val(getCookie('#' + 'tests_' + id + ((additionalArgs != undefined) && (additionalArgs.cookieSuffix != undefined) ? additionalArgs.cookieSuffix : '')).replace(fromCookiesRE, '\n'));

    $('#' + 'tests_' + id).bind('input propertychange', function() {
        setCookie('#' + 'tests_' + id + ((additionalArgs != undefined) && (additionalArgs.cookieSuffix != undefined) ? additionalArgs.cookieSuffix : ''),
            $('#' + 'tests_' + id).val().replace(toCookiesRE, cookieReplacementString),
            1000);
    });

    var count = 0;

    //
    window['controlsArray_' + id] = [];
    window['defaultValuesArray_' + id] = [];

    for (var i = 0; i < queryStrArr.length; i++) {
        if (queryStrArr[i].eval != undefined) {
            var objStr = queryStrArr[i].eval.substring(0, queryStrArr[i].eval.lastIndexOf('.'));
            if (objStr.startsWith('unicodeToWin1251_UrlEncoded(')) {
                objStr = objStr.substring(objStr.indexOf('(') + 1);
            }
            var ctrl = eval(objStr);
            window['controlsArray_' + id].push(eval(objStr));
            window['defaultValuesArray_' + id].push(ctrl.value);
        }
    }

    // 'Process' button
    document.getElementById('process_' + id).onclick = function process() {
        console.log(' Processing request ' + id + ' #' + (++count) + '...');

        var btnCtrl = this;
        btnCtrl.value = 'Processing...';
        var resultCtrl = document.getElementById('results_' + id);
        var defaultColor = resultCtrl.style.backgroundColor;
        resultCtrl.style['background-color'] = '#d9d9d9';
        resultCtrl.style['height'] = resultsDivHeight;
        btnCtrl.disabled = true;

        var request = new XMLHttpRequest();

        var enc = getSelectedEncoding(id);
        if (enc != null) {
            request.overrideMimeType(enc);
        }

        request.addEventListener('load', function() {
            document.getElementById('results_' + id).style['background-color'] = defaultColor;
            document.getElementById('results_' + id).innerHTML = this.responseText;
            btnCtrl.value = 'Process';
            btnCtrl.disabled = false;
            console.log(' Response for request ' + id + ' #' + count + ' received.');
            document.getElementById('tests_' + id).focus();
        });

        var url = document.URL;

        var requestStr = '';

        for (var i = 0; i < queryStrArr.length; i++) {
            if (queryStrArr[i].eval != undefined) {
                var value = window['controlsArray_' + id][Math.floor(i / 2)].value;
                requestStr += queryStrArr[i].eval.startsWith('unicodeToWin1251_UrlEncoded(') ? unicodeToWin1251_UrlEncoded(value) : value;
            }
            else {
                requestStr += queryStrArr[i];
            }
        }

        request.open('POST', url);
        request.setRequestHeader("Content-type", "application/x-www-form-urlencoded");

        try {
            request.send(requestStr);
            console.log(' Request ' + id + ' #' + count + ' sended.');
        }
        catch (exception) {
            console.log('Exception while sending request.');
        }
    }

    // 'Clear' button
    document.getElementById('clear_' + id).onclick = function() {
        var resultCtrl = document.getElementById('results_' + id);
        resultCtrl.innerHTML = resultsDefaults;
        resultCtrl.style['height'] = '0';
    }
};


//
// ** Helper functions
//

function getSelectedEncoding(id) {
    var encodings = document.getElementsByName('encoding_' + id);

    for (var r in encodings) {
        if (encodings[r].checked && encodings[r].value != 'Default') {
            return encodings[r].value;
        }
    }

    return null;
};

window.setTestCaseFields = function (id, direction, override) {
    var textArea = document.getElementById('tests_' + id);

    var lineStart = getSelectionStartLine(textArea);
    var linesCount = getLinesInTextarea(textArea);

    if (direction != undefined) {
        if (direction == 'next') {
            lineStart++;
            if (lineStart > linesCount) {
                if (override) {
                    lineStart = 1;
                }
                else {
                    lineStart--;
                }
            }
        }
        else if (direction == 'prev') {
            lineStart--;
            if (lineStart < 1) {
                if (override) {
                    lineStart = linesCount;
                }
                else {
                    lineStart++;
                }
            }
        }
    }

    function processTestCase(text) {
        resetFields(id);

        var fields = text.split(', ');

        for (var i = 0; i < fields.length; i++) {
            var index = fields[i].indexOf(':');
            var n = parseInt(fields[i].substring(0, index));
            var s = fields[i].substring(index + 1);
            window['controlsArray_' + id][n].value = s;
        }
    }

    selectTextareaLine(textArea, lineStart);

    var selectedStr = textArea.value.substring(textArea.selectionStart, textArea.selectionEnd);

    processTestCase(selectedStr);

    textArea.focus();
};

window.resetFields = function (id) {
        for (var i = 0; i < window['defaultValuesArray_' + id].length; i++) {
            window['controlsArray_' + id][i].value = window['defaultValuesArray_' + id][i];
        }
};


//
// ** Query Strings
//

// ipn=&acc_type=&client_type=&test_sp=GET_CLIENTINFO
// client_id=&client_type=&acc_type=&test_sp=GET_CLIENTINFO_FULL
// client_id=&acc_type=&client_type=&test_sp=GET_PRODUCTLIST
// account_id=&system_info=&test_sp=GET_ACCOUNTINFO
// account_id=&system_info=&test_sp=GET_LASTCASHRECEIPT
// account_id=&system_info=&test_sp=GET_ACCOUNTLIST
// account_id=&test_sp=GET_TRUSTINFO
// account_id=&date_from=&date_to=&system_info=&test_sp=GET_ACCOUNTABSTRACT
// account_id=&system_info=&test_sp=GET_INTERESTRATE
// account_id=&client_type=&test_sp=GET_STANDORDERS
// account_id=&system_info=&test_sp=GET_REPAYMENT
// account_id=&date_from=&date_to=&system_info=&test_sp=GET_DEBTABSTRACT
// account_id=&test_sp=GET_DEBTWORKOUT
// account_id=&test_sp=GET_PARTIALTRANSFER
// account_id=&test_sp=GET_GUARANTOR
// account_id=&system_info=&test_sp=GET_PLEDGE


//
// ** Configuration
//

// Use C:\Users\username\Desktop\Desktop\QAT\QAT-3158\Config Helper.html for auto building next settings calls, using Query Strings above

                              //            html        body        form        input
                              // document.children[0].children[1].children[0].children[0]

appendExtension(1, 'GET_CLIENTINFO',
                 ['ipn=', {eval: "document.children[0].children[1].children[0].children[0].value"},
                  '&acc_type=', {eval: "document.children[0].children[1].children[0].children[2].value"},
                  '&client_type=', {eval: "document.children[0].children[1].children[0].children[4].value"},
                  '&test_sp=GET_CLIENTINFO'],
                 ["text/plain; charset=windows-1251", "text/plain; charset=utf-8"],
                 0, true, { cookieSuffix: '2' });

appendExtension(4, 'GET_CLIENTINFO_FULL',
                 ['client_id=', {eval: "document.children[0].children[1].children[3].children[0].value"},
                  '&client_type=', {eval: "document.children[0].children[1].children[3].children[2].value"},
                  '&acc_type=', {eval: "document.children[0].children[1].children[3].children[4].value"},
                  '&test_sp=GET_CLIENTINFO_FULL'],
                 ["text/plain; charset=windows-1251", "text/plain; charset=utf-8"],
                 0, true);

appendExtension(7, 'GET_PRODUCTLIST',
                 ['client_id=', {eval: "document.children[0].children[1].children[6].children[0].value"},
                  '&acc_type=', {eval: "document.children[0].children[1].children[6].children[2].value"},
                  '&client_type=', {eval: "document.children[0].children[1].children[6].children[4].value"},
                  '&test_sp=GET_PRODUCTLIST'],
                 ["text/plain; charset=windows-1251", "text/plain; charset=utf-8"],
                 0, true);

// ...

//
// ** Change style
// https://davidwalsh.name/add-rules-stylesheets
//

(function() {
    var sheet = (function() {
        // Create the <style> tag
        var style = document.createElement("style");

        // Add a media (and/or media query) here if you'd like!
        // style.setAttribute("media", "screen")
        // style.setAttribute("media", "only screen and (max-width : 1024px)")

        // WebKit hack :(
        style.appendChild(document.createTextNode(""));

        // Add the <style> element to the page
        document.head.appendChild(style);

        return style.sheet;
    })();

    function addCSSRule(sheet, selector, rules, index) {
        if("insertRule" in sheet) {
            sheet.insertRule(selector + "{" + rules + "}", index);
        }
        else if("addRule" in sheet) {
            sheet.addRule(selector, rules, index);
        }
    }

    sheet.insertRule("body { background-color: " + bodyColor + "; }", 0);
    sheet.insertRule("form { margin-top: 10px; margin-bottom: 0; }", 0);
    sheet.insertRule("div { background-color: " + divColor + "; padding: 1px 3px 2px 3px; }", 0);
})();



// ==UserScript==
// @name        Select Without Tail
// @namespace   utils
// @include     https://help.github.com/*
// @include     https://github.com/*
// @version     1
// @grant       none
// ==/UserScript==

// @require https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js

$('body').dblclick(function() {
  var sel = window.getSelection();
  var range = sel.getRangeAt(0);
  var selTxt = range.toString();

  if (selTxt === '') {
    return;
  }

  var start = range.startOffset;
  var end = range.endOffset;
  while (selTxt[end - start - 1] == ' '
         || selTxt[end - start - 1] == '\t') {
    end--;
  }

  var node = sel.focusNode;
  range.setEnd(node, end);
});



// ==UserScript==
// @name        SmartHide
// @namespace   SmartHide
// @include     http://nl.smarthide.com*
// @version     1
// @grant       none
// ==/UserScript==

window.onload = function() {
  document.title = "OOP Principles";

    var st1 = document.createElement('style');
    st1.innerHTML = '#logoSm a { background-image: url(""); display: block; height: 100px; width: 130px; }';
    document.getElementsByTagName('head')[0].appendChild(st1);

    //div.children[0].children[0].children[0].children[0].style.visibility = "hidden";
    //div.children[2].style.visibility = "hidden";
}



// ==UserScript==
// @name        Department Mebmers Info
// @namespace   NNN
// @include     http://www/ua/phone_list.html*
// @version     1
// @grant       none
// @require     ..\scripts.library.js
// ==/UserScript==

var replaceCookiesOrigin = ';';
var replaceCookiesRE = new RegExp(replaceCookiesOrigin, 'g');
var replaceCookiesStr = '###';
var replaceCookiesBackRE = new RegExp(replaceCookiesStr, 'g');

window.process = function () {
    var rePattern = document.getElementById('regexp').value;
    var reFlags = document.getElementById('flags').value;
    var resultsPattern = document.getElementById('resultsPattern').value;

    var RE = new RegExp(rePattern, reFlags);

    var input = document.getElementById('input').value;

    var resultsCtrl = document.getElementById('results');

    resultsCtrl.value = '';

    var count = 0;
    var resultsStr = '';

    var match;
    while ((match = RE.exec(input)) != null) {
        resultsStr += eval(resultsPattern) + '\n';
        count++;
    }

    if (count == 0) {
        resultsCtrl.value = 'No matches...';
    }
    else {
        resultsCtrl.value = resultsStr;
    }
}

window.saveSet = function (readFromCookies, ID) {
    if (window.regularExpressionsPluginSetsArray == undefined) {
        window.regularExpressionsPluginSetsArray = [];
    }

    if (!readFromCookies) {
        var id = 'regularExpressionsPluginSets' + window.regularExpressionsPluginSetsArray.length;
    }
    else {
        var id = 'regularExpressionsPluginSets' + ID;
    }

    var radio = document.createElement('input');
    radio.setAttribute('type', 'radio');
    radio.setAttribute('id', id);
    radio.setAttribute('name', 'regularExpressionsPluginSets');
    radio.addEventListener('click', window.selectSet = function (event) {
        var index = parseInt(event.target.id.substring('regularExpressionsPluginSets'.length));
        console.log(index + ' set selected');

        document.getElementById('regexp').value = window.regularExpressionsPluginSetsArray[index].re;
        document.getElementById('resultsPattern').value = window.regularExpressionsPluginSetsArray[index].resPatt;
    });

    var label = document.createElement('label');
    label.setAttribute('for', 'regularExpressionsPluginSets' + window.regularExpressionsPluginSetsArray.length);
    label.innerText = (!readFromCookies) ? regularExpressionsPluginSetsArray.length : ID;

    document.getElementById('regularExpressionsPluginSets').appendChild(radio);
    document.getElementById('regularExpressionsPluginSets').appendChild(label);

    if (!readFromCookies) {
        var re = document.getElementById('regexp').value;
        var resPatt = document.getElementById('resultsPattern').value;

        regularExpressionsPluginSetsArray.push({re: re, resPatt: resPatt});

        var cookieStr = JSON.stringify(regularExpressionsPluginSetsArray);
        cookieStr = cookieStr.replace(replaceCookiesRE, replaceCookiesStr);

        setCookie('regularExpressionsPlugin', cookieStr, 1000);
    }
}

window.getSetsFromCookies = function () {
    console.log(' ');

    var cookie = getCookie('regularExpressionsPlugin');

    if (cookie == '') {
        return;
    }

    window.regularExpressionsPluginSetsArray = JSON.parse(cookie.replace(replaceCookiesBackRE, replaceCookiesOrigin));

    for (var i = 0; i < regularExpressionsPluginSetsArray.length; i++) {
        document.getElementById('regexp').value = regularExpressionsPluginSetsArray[i].re;
        document.getElementById('resultsPattern').value = regularExpressionsPluginSetsArray[i].resPatt;
        saveSet(true, i);
    }
}

window.getSource = function () {
  document.getElementById('input').value = document.body.innerHTML;
}

var div = document.createElement('div');
div.setAttribute('id', 'regularExpressionsPlugin');
div.setAttribute('style', 'border: 2px solid green; padding: 5px; margin: 2px;');

var divBtn = document.createElement('div');
divBtn.innerHTML = '<button onclick="getSource()">Get page source</button>';

div.appendChild(divBtn);

var divRegularExpressions = document.createElement('div');
divRegularExpressions.innerHTML = "    <p class='regularExpressionsPluginP'>Input:</p>\
    <textarea id='input' style='width: 75%; height: 100px;'></textarea>\
\
    <p class='regularExpressionsPluginP'>Regular expression:</p>\
    <textarea id='regexp' style='width: 75%; height: 22px;'><td><b>(.*?)</b>( .*?)<br>(?:<a href=\"mailto:(.*?@.*?)\">)?.*\\n\\s*<td>(.*?)</td></textarea>\
\
    <p class='regularExpressionsPluginP'>Flags:</p>\
    <input type=text id='flags' style='width: 75%; height: 22px;' value='g'></textarea>\
\
    <p class='regularExpressionsPluginP'>Show results like this (use match[index]):</p>\
    <textarea id='resultsPattern' style='width: 75%; height: 22px;'>match[1] + match[2] + '\\t' + match[3] + '\\t' + match[4]</textarea>\
\
    <div id='regularExpressionsPluginSets'>\
        <button onclick='process()' style='font-weight: bold;'>Process</button>\
        <button onclick='saveSet(false)' style='color: red;'>Save set</button>\
    </div>\
\
    <p class='regularExpressionsPluginP'>Matches:</p>\
    <textarea id='results' style='width: 75%; height: 100px;'></textarea>";

div.appendChild(divRegularExpressions);

document.body.appendChild(div);

var style = document.createElement('style');
style.innerHTML = '\
    .regularExpressionsPluginP {\
        margin: 0;\
        font-weight: bold;\
    }';

document.head.appendChild(style);

getSetsFromCookies();



// ==UserScript==
// @name        MSDN Links
// @namespace   MSDN
// @include     https://msdn.microsoft.com/*
// @version     1
// @grant       none
// ==/UserScript==

// console.log("*** Hello, world! ***")

(function() {
    try {
        // http://stackoverflow.com/questions/12897446/greasemonkey-wait-for-page-to-load-before-executing-code-techniques

        window.addEventListener('load', function() {
            var body = document.getElementsByTagName("body")[0];
            var text = body.innerHTML;

            var linkRE = /https:\/\/msdn.microsoft.com\/en-us/g;
            var replaceTo = 'https://msdn.microsoft.com';

            body.innerHTML = text.replace(linkRE, replaceTo);

            // console.log("Adding style...");
            var sheet = document.createElement('style');
            sheet.innerHTML = ".topic a:visited {color: #008f15;}";
            document.body.appendChild(sheet);
            // console.log("Style added.");
        });
    }
    catch (exception) {
        console.log("An error occured while running greasemonkey script.");
    }
})();


//
// Wrap by form.
//

var el = theElement;
var wrapper = document.createElement('form');
wrapper.setAttribute('id', 'formWrapId');
el.parentNode.insertBefore(wrapper, el);
wrapper.appendChild(el);



// ==UserScript==
// @name        StopWatch
// @namespace   google
// @include     https://www.google.com.ua/search?*q=stopwatch*
// @version     1
// @grant       none
// ==/UserScript==

var q;

q = document.getElementById('searchform');
q.parentNode.removeChild(q);

q = document.getElementById('top_nav');
q.parentNode.removeChild(q);

q = document.getElementById('appbar');
q.parentNode.removeChild(q);

q = document.getElementsByClassName('srg')[0];
q.parentNode.removeChild(q);

q = document.getElementById('extrares');
q.parentNode.removeChild(q);

q = document.getElementById('foot');
q.parentNode.removeChild(q);

q = document.getElementById('footcnt');
q.parentNode.removeChild(q);

q = document.getElementById('ataw');
q.parentNode.removeChild(q);

q = document.getElementById('sfcnt');
q.parentNode.removeChild(q);

q = document.getElementById('center_col');
q.style.width = '350px';



// ==UserScript==
// @name        OALD2
// @namespace   oald
// @include     http://www.oxfordlearnersdictionaries.com/*
// @version     1
// @grant       none
// ==/UserScript==
// @require '../scripts.jquery2.2.4.min.js'

(function run(){
  var count = 0;

  window.onload = function() {
    console.log(' ** onload: ' + (++count));
  }

  $('.webtop-g').eq(0).dblclick(function(event) {
    event.stopPropagation();
  });

})();

// Another version of next OALD see at OALD-Card github project

// @name        OALD
// @namespace   oald
// @include     http://www.oxfordlearnersdictionaries.com/*
// @version     1
// @grant       none
// ==/UserScript==
//
// @require ..\jquery2.2.0.min.js
//
$(document).ready((function(textInputId) {

    //$("body").css("visibility", "hidden");

    // *******************************************************
    // *                                                     *
    // *             • • •  Configuration  • • •             *
    // *                                                     *
    // *   Start automatic download audio: true or false     *
            var AUTO_DOWNLOAD = false;
    // *                                                     *
    // *                                                     *
    // *   Type of audio files to download: 'mp3' or 'ogg'   *
            var AUDIO_TYPE = 'ogg';
    // *                                                     *
    // *******************************************************

    try {
        var div = document.createElement('div');
        div.style.cssText = 'border: 2px solid lime; padding: 5px;';
        var divBody =
            '<input type=radio name="audioType" id="ogg" value="ogg"> Ogg'+
            '<input type=radio name="audioType" id="mp3" value="mp3" checked="true"> Mp3' +
            '<br>' +
            '<textarea id="downloadList" style="width: 100%; height: 200px; background-color: #99f;"></textarea>' +
            '<br>' +
            '<button onclick="oaldDownload()">Download</button>';
        div.innerHTML = divBody;

        document.getElementsByTagName('body')[0].appendChild(div);

        if (AUDIO_TYPE == 'ogg') {
            document.getElementById('ogg').checked = true;
        }
        else { // mp3
            document.getElementById('mp3').checked = true;
        }

        //

        document.oaldDownload = function() {
            //console.log('Process download...');

            var downloadListElem = document.getElementById('downloadList');

            var urls = getAudioUrls(downloadListElem.value);

            //if (urls != null) {
            //    console.log('Found URLs:');
            //    for (var i = 0; i < urls.length; i++) {
            //        console.log(urls[i]);
            //    }
            //}
            //else {
            //    console.log('No URLs found.');
            //}

            for (var i = 0; i < urls.length; i++) {
                //console.log('oaldDownload(), url: ' + urls[i]);
                saveFile(urls[i]);
            }

            //
            // Helper functions
            //

            function getAudioUrls(text) {
                var result = [];

                var urlRE = (AUDIO_TYPE == 'ogg') ?
                    /http:\/\/.+?\.ogg/g :
                    /http:\/\/.+?\.mp3/g;

                var url;
                while ((url = urlRE.exec(text)) != null) {
                    result[result.length] = url[0];
                }

                if (result.length == 0) {
                    result = null;
                }
                /*
                else { // Forcsed converting 'mp3' to 'ogg'
                    if (AUDIO_TYPE == 'ogg') {
                        // http://stackoverflow.com/questions/15604140/replace-multiple-strings-with-multiple-other-strings
                        //
                        var mapObj = {
                            uk_pron:"uk_pron_ogg",
                            us_pron:"us_pron_ogg",
                            mp3:"ogg"
                        };
                        for (var i = 0; i < result.length; i++) {
                            result[i] = result[i].replace(/uk_pron|us_pron|mp3/gi, function(matched){
                                return mapObj[matched];
                            });
                        }
                    }
                }
                //*/

                return result;
            }

            // https://ausdemmaschinenraum.wordpress.com/2012/12/06/how-to-save-a-file-from-a-url-with-javascript/
            //
            function saveFile(url) {
                var filename = url.substring(url.lastIndexOf("/") + 1).split("?")[0];
                var xhr = new XMLHttpRequest();
                xhr.responseType = 'blob';
                xhr.onload = function() {
                    var a = document.createElement('a');
                    a.href = window.URL.createObjectURL(xhr.response);
                    a.download = filename;
                    a.style.display = 'none';
                    document.body.appendChild(a);
                    a.click();
                    delete a;
                };
                xhr.open('GET', url);
                xhr.send();
            }
        }
    }
    catch (exception) {
        console.log('Something wrong in download module');
    }

    //

    (function() {
        console.log("Click/Blur: Initialization started...");
        var success = true;

        var clicks = 0;

        try {
            $(textInputId).on('click', function() {
                //console.log("click..." + clicks);
                if (clicks == 0) {
                    this.selectionStart = 0;
                    this.selectionEnd = this.textLength;
                    clicks = 1;
                }
                else {
                    clicks = 0;
                }
            });

            $(textInputId).on('blur', function() {
                //console.log("blur...." + clicks);
                clicks = 0;
            });
        }
        catch (exception) {
            success = false;
        }

        if (success) {
            console.log("Click/Blur: Initialization finished successfully.");
        }
        else {
            console.log("Click/Blur: Initialization failed.");
        }
    })();

    (function() {
        try {
            // http://stackoverflow.com/questions/12897446/greasemonkey-wait-for-page-to-load-before-executing-code-techniques
            //
            window.addEventListener('load', function() {

                var html = $("html").html();

                var info = process(html);

                if (info != null) {
                    $(textInputId).val(info);
                    $(textInputId).select();

                    if (AUTO_DOWNLOAD) {
                        $('#downloadList').val(info);
                        document.oaldDownload();
                    }
                }
                else {
                    console.log("Word content not found.");
                }
            });
        }
        catch (exception) {
            console.log("Selection initialization failed.");
        }
    })();

    //
    // Helper functions
    //

    function process(html) {
        var resultStr = "";

        var entries = [];
        entries[0] = processPage(html);

        console.log("Other POS:");

        var otherPosRE = /<a href="(.+?)" title=.+?><span class=(?:'|")arl1(?:'|")>.+?<\/span><\/a>/g;
        var otherPos;

        while ((otherPos = otherPosRE.exec(html)) != null) {
            var url = otherPos[1];
            console.log("URL: " + url);

            var request = new XMLHttpRequest();
            request.url = url;

            request.onreadystatechange = function() {
                if (this.readyState !== XMLHttpRequest.DONE) {
                    return;
                }
                if (this.status !== 200) {
                    return;
                }

                console.log("A response was received.");

                entries[entries.length] = processPage(this.responseText);
            };

            request.open("GET", url, false);
            request.send();
        }

        console.log("Other POS end.");

        //

        var separator = " – ";

        resultStr += entries[0].word + separator;

        console.log("Entries length: " + entries.length);

        for (var i = 0; i < entries.length; i++) {
            resultStr += entries[i].pos + (entries[i].isKey ? "(k)" : "") + ", ";
        }
        resultStr = resultStr.substring(0, resultStr.length - 2) + separator;

        var audio = "";
        for (var j = 0; j < entries[0].pronunciations.length; j++) {
            resultStr += entries[0].pronunciations[j].country + ' /' + entries[0].pronunciations[j].text + "/; ";
            audio += entries[0].pronunciations[j].country + " " + entries[0].pronunciations[j].audioUrl + "; ";
        }
        resultStr = resultStr.substring(0, resultStr.length - 2) +
            " – **comments** – **translation** – **examples** – " +
            audio.substring(0, audio.length - 2);

        // Check other pronunciations

        var pTmp0 = [],
            pTmpI;
        for (var j = 0; j < entries[0].pronunciations.length; j++) {
            pTmp0[j] = entries[0].pronunciations[j].country + entries[0].pronunciations[j].text;
        }

        checking:
        for (var i = 1; i < entries.length; i++) {
            for (var j = 0; j < entries[i].pronunciations.length; j++) {
                pTmpI = entries[i].pronunciations[j].country + entries[i].pronunciations[j].text;
                if (pTmp0.indexOf(pTmpI) < 0) {
                    resultStr = "**!! " + resultStr;
                    break checking;
                }
            }
        }

        if (resultStr == '') {
            resultStr = null;
        }

        return resultStr;
    }

    // Object version
    function processPage(html) {
        //
        // Returns 'result' object with properties:
        //  result.word
        //  result.pos
        //  result.isKey
        //  result.pronunciations
        //

        var mainContentRE = /<div id="entryContent">(?:.|\s)+?<!-- End of DIV entry--><\/div>/;
        var mainContent = mainContentRE.exec(html);

        if (mainContent == null) {
            return {};
        }

        var result = {};

        mainContent = mainContent[0];

        var clearRE = /(<span.+?>)|(<\/span>)/g;

        //

        var wordRE = /(?:<h2 class="h">)(.+?)(?:<\/h2>)/;
        var word = wordRE.exec(mainContent);
        console.log(word[1]);

        result.word = word[1].replace(clearRE, '');

        //

        var posRE = /(?:<span class="pos">)(.+?)(?:<\/span>)/;
        var pos = posRE.exec(mainContent);
        console.log(pos[1]);

        result.pos = pos[1];

        //

        var keyRE = /<a class=\"oxford3000\" href=\"http:\/\/www.oxfordlearnersdictionaries.com\/wordlist\/english\/oxford3000\/\">.*?<\/a>/;
        var key = keyRE.exec(mainContent);
        result.isKey = (key != null);

        // Pronunciation

        console.log('** trying to get pronunciations...');

        result.pronunciations = [];

        var tmp = mainContent;

        var pronunPureRE = /<div class="pron-gs ei-g" (?:(tofix="y" )|(careful="y" ))*eid=((?!verbform="y").)+?><!-- End of DIV pron-gs ei-g--><\/div>/;
        //var pronunPureRE = /<div class="pron-gs ei-g" eid=((?!verbform="y").)+?><!-- End of DIV pron-gs ei-g--><\/div>/;
        mainContent = pronunPureRE.exec(mainContent);

        if (mainContent !== null) {
            console.log('** not null...');
            var pronunRE = (AUDIO_TYPE == 'ogg') ?
                /<span class="(?:bre|name)">(BrE|NAmE)<\/span>.+?<\/span>.+?<\/span>(.+?)<span class="wrap">.+? data-src-ogg="(http:\/\/.+?\.ogg)/g :
                /<span class="(?:bre|name)">(BrE|NAmE)<\/span>.+?<\/span>.+?<\/span>(.+?)<span class="wrap">.+?(http:\/\/.+?\.mp3)/g;
            var pronun;
            while ((pronun = pronunRE.exec(mainContent)) != null) {
                var country = pronun[1];
                var pr = pronun[2].replace(clearRE, '');
                var url = pronun[3];
                console.log('**: ', country);
                console.log('**: ', pr);
                console.log('**: ', url);

                result.pronunciations[result.pronunciations.length] = {country: country, text: pr, audioUrl: url};
            }
        }

        return result;
    }

    // " –  –  –  –  – "
    // "word – POS – transcription – **comments** – **translation** – **examples** - audio_paths"
})("#q"));


//
// ** Template for embedding of new div with certain functionality.
//
$ window.onload = function() {
$     var that = this;
$
$     initHelper();
$
$     // That is it. The next code is just details of implementation.
$
$     function initHelper() {
$         if (!runInCurrentFrame(that)) {
$             return;
$         }
$
$         if (that.helperObject) {
$             console.log('** helperObject already exists. Exit.');
$             return;
$         }
$
$         console.log('** The Helper just started!');
$         console.log(that);
$
$         var div = document.createElement('div');
$         div.className = 'helper';
$         div.innerHTML = helperHTML();
$
$         document.getElementsByTagName('body')[0]
$             .children[0].children[2].appendChild(div);
$
$         var style = document.createElement('style');
$         style.innerHTML = helperStyle();
$
$         document.getElementsByTagName('head')[0].appendChild(style);
$
$         that.helperObject = helperObject();
$     }
$
$     // Used in initHelper().
$     function runInCurrentFrame(window) {
$         if (window.name.startsWith('gadget')) {
$             return false;
$         }
$
$         return true;
$     }
$
$     // Used in initHelper().
$     function helperHTML() {
$         return '\
$             <div>The Helper</div>\
$             <div><button onclick="helperObject.loadInfo()">Get info</button></div>\
$             <div><input id="helperURL" class="helper-width"></div>\
$             <div><textarea id="helperResults" class="helper-results helper-width"></textarea></div>\
$         ';
$     }
$
$     // Used in initHelper().
$     function helperStyle() {
$         return '\
$             .helper {\
$                 background-color: #080;\
$                 height: 250px;\
$                 padding: 5px;\
$                 margin: 3px;\
$             }\
$             .helper-width {\
$                 width: calc(100% - 10px);\
$             }\
$             \
$             .helper-results {\
$                 height: 170px;\
$             }\
$         ';
$     }
$
$     // Used in initHelper().
$     function helperObject() {
$         return {
$             loadInfo: function() {
$                 var url = getUrl();
$                 console.log('The URL: ' + url);
$
$                 showResults('Waiting for data...');
$
$                 if (url != '') {
$                     var xhttp = new XMLHttpRequest();
$                     xhttp.onreadystatechange = function() {
$                       if (this.readyState == 4 && this.status == 200) {
$                         console.log('** Loaded data:');
$                         console.log(this.responseText);
$                         showResults(processResults(this.responseText));
$                       }
$                       else {
$                         console.log('** No data loaded (readyState: ' + this.readyState + ', status: ' + this.status + '):');
$                         //console.log(this.responseText);
$                       }
$                     };
$                     xhttp.withCredentials = true;
$                     xhttp.open("GET", url, true);
$                     xhttp.setRequestHeader("Content-type", "application/json");
$                     xhttp.send();
$                 }
$                 else {
$                     showResults(processResults(document.documentElement.innerHTML));
$                 }
$
$                 // Helper functions.
$
$                 function processResults(r) {
$                     var result = '';
$
$                     console.log('** Fetching results...');
$
$                     result = tasksOfTheCertainKind(
$                         /(<li><a class=\"issue-link\")(?:.|\r*\n)*?\1/g,
$                         /data-issue-key=\"(.*?)\"/g,
$                         '"Super task"'
$                     );
$
$                     result += tasksOfTheCertainKind(
$                         /<table id=\"issuetable\".*?>(?:.|\r*\n)*?<div class=\"end-of-stable-message\">/g,
$                         /(?:<td class=\"stsummary\"><a class=\"issue-link\" data-issue-key=\"(.*?)\")|(?:<tr id=\".*?data-issuekey=\"(.*?)\" class=\"issuerow\">)/g,
$                         '"Sub task"'
$                     );
$
$                     result += tasksOfTheCertainKind(
$                         /<dl class=\"links-list(?:.*?)\">(?:.|\r?\n)*?<dt title=\"(.*)\">(?:.|\r?\n)*?<\/dl>/g,
$                         /<span title="(?:.|\r*\n)*?<a href=.*?>(.*)<\/a>(?:.|\r*\n)*?<\/span>/g,
$                         'm[1]'
$                     );
$
$                     console.log('** Results fetched.');
$
$                     function tasksOfTheCertainKind(groupRe, taskRe, expression) {
$                         var result = '';
$
$                         var m;
$                         var count = 0;
$                         while ((m = groupRe.exec(r)) != null && (++count) < 10) {
$                             // console.log('**');
$                             // console.log(m[0]);
$                             var tasks = getTasks(m[0], taskRe);
$                             for (var i = 0; i < tasks.length; i++) {
$                                 result += eval(expression) + '\t' + tasks[i] + '\n';
$                             }
$                         }
$
$                         return result;
$                     }
$
$                     function getTasks(t, taskRe) {
$                         var result = [];
$                         var m;
$                         while ((m = taskRe.exec(t)) != null) {
$                             console.log('m:');
$                             console.log(m);
$                             pushResult(m[1] != undefined ? m[1] : m[2] != undefined ? m[2] : 'unknown', result);
$                         }
$
$                         function pushResult(r, results) {
$                             if (results.indexOf(r) == -1) {
$                                 results.push(r);
$                             }
$                         }
$
$                         return result;
$                     }
$
$                     return result;
$                     // return r;
$                 }
$
$                 function getUrl() {
$                     return document.getElementById('helperURL').value;
$                 }
$
$                 function showResults(text) {
$                     document.getElementById('helperResults').value = text;
$                 }
$             }
$         }
$     }
$ }


//
// Version with separate event initialization
//
+ window.onload = function() {
+     var that = {};
+
+     initHelper();
+
+     // That is it. The next code is just details of implementation.
+
+     function initHelper() {
+         console.log('** The Helper initialization...');
+         console.log(that);
+
+         if (!runInCurrentFrame(that)) {
+             console.log('** Cannot run in current frame. Exit.');
+             return;
+         }
+
+         if (that.helperObject) {
+             console.log('** helperObject already exists. Exit.');
+             return;
+         }
+
+         var div = document.createElement('div');
+         div.className = 'helper';
+         div.innerHTML = helperHTML();
+
+         document.getElementsByTagName('body')[0]
+             .children[0].children[2].appendChild(div);
+
+         var style = document.createElement('style');
+         style.innerHTML = helperStyle();
+
+         document.getElementsByTagName('head')[0].appendChild(style);
+
+         that.helperObject = helperObject();
+         helperEventHandlers();
+
+         console.log('** The Helper initialization complete.');
+     }
+
+     function helperEventHandlers() {
+       document.getElementById('helperButton').onclick = that.helperObject.loadInfo;
+     }
+
+     // Used in initHelper().
+     function runInCurrentFrame(window) {
+         if (window.name && window.name.startsWith('gadget')) {
+             return false;
+         }
+
+         return true;
+     }
+
+     // Used in initHelper().
+     function helperHTML() {
+         return '\
+             <div>The Helper</div>\
+             <div><button id="helperButton">Get info</button></div>\
+             <div><input id="helperURL" class="helper-width"></div>\
+             <div><textarea id="helperResults" class="helper-results helper-width"></textarea></div>\
+         ';
+     }
+
+     // Used in initHelper().
+     function helperStyle() {
+         return '\
+             .helper {\
+                 background-color: #080;\
+                 height: 250px;\
+                 padding: 5px;\
+                 margin: 3px;\
+             }\
+             .helper-width {\
+                 width: calc(100% - 10px);\
+             }\
+             \
+             .helper-results {\
+                 height: 170px;\
+             }\
+         ';
+     }
+
+     // Used in initHelper().
+     function helperObject() {
+         return {
+             loadInfo: function() {
+                 var url;
+                 try {
+                 	url = getUrl();
+                 }
+                 catch(err) {
+                   console.log('** Cannot get the URL. Exit.');
+                   return;
+                 }
+                 console.log('The URL: ' + url);
+
+                 showResults('Waiting for data...');
+
+                 if (url != '') {
+                     var xhttp = new XMLHttpRequest();
+                     xhttp.onreadystatechange = function() {
+                       if (this.readyState == 4 && this.status == 200) {
+                         console.log('** Loaded data:');
+                         console.log(this.responseText);
+                         showResults(processResults(this.responseText));
+                       }
+                       else {
+                         console.log('** No data loaded (readyState: ' + this.readyState + ', status: ' + this.status + '):');
+                         //console.log(this.responseText);
+                       }
+                     };
+                     xhttp.withCredentials = true;
+                     xhttp.open("GET", url, true);
+                     xhttp.setRequestHeader("Content-type", "application/json");
+                     xhttp.send();
+                 }
+                 else {
+                     showResults(processResults(document.documentElement.innerHTML));
+                 }
+
+                 // Helper functions.
+
+                 function processResults(r) {
+                     var result = '';
+
+                     console.log('** Fetching results...');
+
+                     result = tasksOfTheCertainKind(
+                         /(<li><a class=\"issue-link\")(?:.|\r*\n)*?\1/g,
+                         /data-issue-key=\"(.*?)\"/g,
+                         '"Super task"'
+                     );
+
+                     result += tasksOfTheCertainKind(
+                         /<table id=\"issuetable\".*?>(?:.|\r*\n)*?<div class=\"end-of-stable-message\">/g,
+                         /(?:<td class=\"stsummary\"><a class=\"issue-link\" data-issue-key=\"(.*?)\")|(?:<tr id=\".*?data-issuekey=\"(.*?)\" class=\"issuerow\">)/g,
+                         '"Sub task"'
+                     );
+
+                     result += tasksOfTheCertainKind(
+                         /<dl class=\"links-list(?:.*?)\">(?:.|\r?\n)*?<dt title=\"(.*)\">(?:.|\r?\n)*?<\/dl>/g,
+                         /<span title="(?:.|\r*\n)*?<a href=.*?>(.*)<\/a>(?:.|\r*\n)*?<\/span>/g,
+                         'm[1]'
+                     );
+
+                     console.log('** Results fetched.');
+
+                     function tasksOfTheCertainKind(groupRe, taskRe, expression) {
+                         var result = '';
+
+                         var m;
+                         var count = 0;
+                         while ((m = groupRe.exec(r)) != null && (++count) < 10) {
+                             // console.log('**');
+                             // console.log(m[0]);
+                             var tasks = getTasks(m[0], taskRe);
+                             for (var i = 0; i < tasks.length; i++) {
+                                 result += eval(expression) + '\t' + tasks[i] + '\n';
+                             }
+                         }
+
+                         return result;
+                     }
+
+                     function getTasks(t, taskRe) {
+                         var result = [];
+                         var m;
+                         while ((m = taskRe.exec(t)) != null) {
+                             console.log('m:');
+                             console.log(m);
+                             pushResult(m[1] != undefined ? m[1] : m[2] != undefined ? m[2] : 'unknown', result);
+                         }
+
+                         function pushResult(r, results) {
+                             if (results.indexOf(r) == -1) {
+                                 results.push(r);
+                             }
+                         }
+
+                         return result;
+                     }
+
+                     return result;
+                     // return r;
+                 }
+
+                 function getUrl() {
+                     return document.getElementById('helperURL').value;
+                 }
+
+                 function showResults(text) {
+                     document.getElementById('helperResults').value = text;
+                 }
+             }
+         }
+     }
+ }


* //
* // Display a URL next to an anchor.
* //
* window.onload = function() {
*   console.log('** "Anchor\'s URL" script initialization...');
*
*     // *************************************************
*     var that = this;
*
*     initHelper();
*
*     // That is it. The next code is just details of implementation.
*
*     function initHelper() {
*         if (!runInCurrentFrame(that)) {
*             return;
*         }
*
*         if (that.helperObject2) {
*             console.log('** helperObject already exists. Exit.');
*             return;
*         }
*
*         console.log('** The Helper just started!');
*         console.log(that);
*
*         var div = document.createElement('div');
*         div.className = 'helper';
*         div.innerHTML = helperHTML();
*
*         document.getElementsByTagName('body')[0]
*             .children[0].appendChild(div);
*
*         var style = document.createElement('style');
*         style.innerHTML = helperStyle();
*
*         document.getElementsByTagName('head')[0].appendChild(style);
*
*         that.helperObject = helperObject();
*     }
*
*     // Used in initHelper().
*     function runInCurrentFrame(window) {
*         if (window.name.startsWith('gadget')) {
*             return false;
*         }
*
*         return true;
*     }
*
*     // Used in initHelper().
*     function helperHTML() {
*         return '\
*             <div>The Helper</div>\
*             <div><button onclick="helperObject.toggleUrls()">Toggle all URLs</button></div>\
*         ';
*     }
*
*     // Used in initHelper().
*     function helperStyle() {
*         return '\
*             .helper {\
*                 background-color: #080;\
*                 padding: 5px;\
*                 margin: 3px;\
*                 left:110px;\
*                 top: 890px;\
*                 position: absolute;\
*             }\
*         ';
*     }
*
*     // Used in initHelper().
*     function helperObject() {
*         var urlsAreShown = false;
*         var count = 0;
*
*         return {
*             toggleUrls: function() {
*                 $('a').each(function() {
*                     addUrlSpan(this);
*                 });
*
*                 count = 0;
*                 console.log('Current state: ' + urlsAreShown);
*                 if (urlsAreShown) {
*                     $('a').each(function(){
*                         toggleUrl(this, false);
*                         count++;
*                     });
*
*                     urlsAreShown = false;
*                 }
*                 else {
*                     $('a').each(function(){
*                         toggleUrl(this, true);
*                         count++;
*                     });
*
*                     urlsAreShown = true;
*                 }
*                 console.log('Toggled: ' + count + ' element(s).');
*             }
*         }
*     }
*     // *************************************************
*
*   var maxCount = 2; // Or 3
*
*   function insertAfter(newNode, referenceNode) {
*     referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
*   }
*
*   function toggleUrl(element, state) {
*       if (!element.appendedObj) {
*           return;
*       }
*
*       // Simple version.
*       // if (state != undefined) {
*       //     element.appendedObj.visible = !state;
*       // }
*
*       // More sophisticated version.
*       // Do not toggle if all toggled by button.
*       if (state == undefined && element.appendedObj.toggledOn) {
*           return;
*       }
*
*       if (state != undefined) {
*           element.appendedObj.visible = !state;
*
*           if (state == true) {
*               element.appendedObj.toggledOn = true;
*           }
*           else {
*               element.appendedObj.toggledOn = false;
*           }
*       }
*
*       //
*
*       if (element.appendedObj.visible) {
*           //this.appendedObj.url.style.visibility = 'hidden';
*           element.appendedObj.url.style.display = 'none';
*           element.appendedObj.visible = false;
*       }
*       else {
*           //this.appendedObj.url.style.visibility = 'visible';
*           element.appendedObj.url.style.display = 'inline';
*           element.appendedObj.visible = true;
*       }
*   }
*
*   function addUrlSpan(element) {
*       if (!element.appendedObj) {
*           try {
*               var urlSpan = document.createElement('span');
*               urlSpan.innerText = ' [' + element.attributes.href.value + ']';
*               //urlSpan.style.visibility = 'hidden';
*               urlSpan.style.display = 'none';
*               insertAfter(urlSpan, element);
*
*               element.appendedObj = {};
*               element.appendedObj.url = urlSpan;
*               element.appendedObj.mouseOverCount = 2;
*               element.appendedObj.visible = false;
*           }
*           catch(err) {
*               console.log('** Error in addUrlSpan():');
*               console.log(element);
*               element.appendedObj = null;
*           }
*       }
*   }
*
*   $('a').mouseover(function(){
*       if (!this.appendedObj) {
*           //console.log('1.');
*           addUrlSpan(this);
*       }
*       else if (this.appendedObj.visible
*             || (!this.appendedObj.visible && this.appendedObj.mouseOverCount >= maxCount)) {
*           //console.log('2.');
*           toggleUrl(this);
*           this.appendedObj.mouseOverCount = 1;
*       }
*       else {
*           //console.log('3.');
*           this.appendedObj.mouseOverCount++;
*       }
*   });
*
*   console.log('** "Anchor\'s URL" script initialization complete.');
* }


// ==UserScript==
// @name     BTT
// @version  1
// @grant    none
// @include  https://www.csltd.com.ua/bt/*
// @require  http://localhost:8080/scripts.jquery3.1.0.min.js
// @require  http://localhost:8080/node_modules/jquery-autosize/jquery.autosize.min.js
// Download the previous '@require' using 'npm install jquery-autosize'.
// ==/UserScript==

String.prototype.lines = function() { return this.split(/\r*\n/); }
String.prototype.lineCount = function() { return this.lines().length; }

//window.onload = function() {
    console.log('** Applying better styles...');

    var st2 = document.createElement('style');
    st2.innerHTML =
      'textarea {\
        resize: vertical;\
      }\
      textarea, select, input, table {\
        border: 0px !important;\
        font-size: 10pt !important;\
      }\
      .tablecell {\
        font-family : Verdana, sans-serif;\
        font-size: 10pt;\
        background-color : #F5F5F5;\
        color: Black;\
        border: 1pt solid lightgrey;\
        padding: 3px;\
      }\
      a {\
        font-family: Verdana, sans-serif;\
        color: #333399;\
        background-color: #F5F5F5;\
        text-decoration: underline;\
        border: 1pt solid #F5F5F5;\
        font-size: 10pt !important;\
      }';
    document.head.appendChild(st2);

    $('textarea')
      .attr('rows', '4')
      .autosize()
      .height(function(i, h) {
        // Decreasing the size set by autosize(); toggle on the next 'if' for Google Chrome.
        //if (this.value.lineCount() >= 4) {
          $(this).height(h - 16);
        //}
      })
      .removeAttr('readonly')
      .css('resize', 'vertical');

    console.log('** Styles successfully aplied.');
//};


// ==UserScript==
// @name     Name
// @version  1
// @include https://the.url
// @grant GM.xmlHttpRequest
// ==/UserScript==

console.log('** Starting load bootstrap...');

GM.xmlHttpRequest({
  method: "GET",
  url: "https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css",
  onload: function(response) {
    var st2 = document.createElement('style');
    st2.innerHTML = response.response;
    document.head.appendChild(st2);
    console.log('** Style aplied.');
  }
});

console.log('** Success.');


$$$    jQuery
$$$    +
$$$    Autosize 4.0.0
$$$    license: MIT
$$$    http://www.jacklmoore.com/autosize
$$$    https://github.com/jackmoore/autosize
$$$
$$$  String.prototype.lines = function() { return this.split(/\r*\n/); }
$$$  String.prototype.lineCount = function() { return this.lines().length; }
$$$
$$$  function getCreationTime(str) {
$$$    var re = /<TEXTAREA class=\"textareaR100\".*\r\n.*\r\n.*\r\n.*\r\n.*\r\n.*/g;
$$$    var result = re.exec(str);
$$$    var tmp;
$$$    while ((tmp = re.exec(str)) != null) {
$$$      result = tmp;
$$$    }
$$$
$$$    var reCreation = /<br>(.*)<br>/g;
$$$    result = reCreation.exec(result[0]);
$$$
$$$    return result[1];
$$$  }
$$$
$$$  //window.onload = function() {
$$$      console.log('** Applying better styles...');
$$$
$$$      var st2 = document.createElement('style');
$$$      st2.innerHTML =
$$$        'textarea {\
$$$          resize: vertical;\
$$$        }\
$$$        textarea, select, input, table {\
$$$          border: 0px !important;\
$$$          font-size: 10pt !important;\
$$$        }\
$$$        .getInfo {\
$$$          margin-left: 4px;\
$$$        }\
$$$        .tablecell {\
$$$          font-family : Verdana, sans-serif;\
$$$          font-size: 10pt;\
$$$          background-color : #F5F5F5;\
$$$          color: Black;\
$$$          border: 1pt solid lightgrey;\
$$$          padding: 3px;\
$$$        }\
$$$          .task-open-btn {\
$$$          border: 1px solid #888 !important;\
$$$        }\
$$$        a {\
$$$          font-family: Verdana, sans-serif;\
$$$          color: #333399;\
$$$          background-color: #F5F5F5;\
$$$          text-decoration: underline;\
$$$          border: 1pt solid #F5F5F5;\
$$$          font-size: 10pt !important;\
$$$        }';
$$$      document.head.appendChild(st2);
$$$
$$$      // 1.
$$$      $('textarea').attr('rows', '4');
$$$      // 2.
$$$      autosize($('textarea'));
$$$      // 3.
$$$      console.log('** 3');
$$$      $('textarea')
$$$        .removeAttr('readonly')
$$$        .css('resize', 'vertical');
$$$      console.log('** OK');
$$$
$$$      //
$$$      var issNumInput = document.getElementsByName('issue_no')[0];
$$$      if (issNumInput != null) {
$$$        issNumInput.style.float = 'left';
$$$        issNumInput.style.marginLeft = '30px';
$$$        issNumInput.style.paddingRight = '3px';
$$$        var focused = false;
$$$        issNumInput.addEventListener('focus', function(){
$$$          if (!focused) {
$$$              this.select();
$$$            focused = true;
$$$          }
$$$        });
$$$        issNumInput.addEventListener('blur', function(){
$$$          focused = false;
$$$        });
$$$
$$$        var td = issNumInput.parentNode;
$$$        td.style.backgroundColor = '#99d9ea';
$$$
$$$        var btn = issNumInput.previousSibling.previousSibling;
$$$        btn.value = 'Open >>';
$$$        btn.classList.add('task-open-btn');
$$$        btn.style.marginRight = '10px';
$$$        btn.style.height = '19px';
$$$        btn.style.width = '80px';
$$$
$$$
$$$        var alreadyExists = (document.getElementById('superRow') != null);
$$$        if (alreadyExists) {
$$$            return;
$$$        }
$$$
$$$        var tr = issNumInput.parentNode.parentNode;
$$$        var tbody = tr.parentElement;
$$$
$$$        var newTr = document.createElement('tr');
$$$        newTr.id = 'superRow';
$$$        tbody.insertBefore(newTr, tr);
$$$
$$$        var newTd = document.createElement('td');
$$$        newTd.setAttribute('colspan', '2');
$$$        newTr.appendChild(newTd);
$$$
$$$        var textArea = document.createElement('textarea');
$$$        textArea.classList.add('getInfo');
$$$        document.body.insertBefore(textArea, document.body.lastChild);
$$$        $('.getInfo').css('resize', 'both');
$$$
$$$        var newBtn = document.createElement('input');
$$$        newBtn.type = 'button';
$$$        newBtn.classList.add('bluebuttonsmall');
$$$        newBtn.value = 'Get';
$$$        newBtn.addEventListener('click', function() {
$$$          var xhr = new XMLHttpRequest();
$$$          xhr.open('POST', 'https://www....');
$$$          xhr.withCredentials = true;
$$$          xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
$$$          xhr.responseType = 'arraybuffer';
$$$          xhr.onreadystatechange = function() { //Call a function when the state changes.
$$$              if(xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) {
$$$                console.log('Start decoding...');
$$$                const contenttype = xhr.getResponseHeader('content-type');
$$$                const charset = 'windows-1251';
$$$                const dataView = new DataView(xhr.response);
$$$                const decoder = new TextDecoder(charset);
$$$                var decodedStr = decoder.decode(dataView);
$$$                //textArea.value = decoder.decode(dataView);
$$$                textArea.value = getCreationTime(decodedStr);
$$$                console.log('Yahoo!');
$$$              }
$$$          }
$$$            var taskId = issNumInput.value;
$$$          xhr.send('issue_no=' + taskId + '&iss_per_page=0&h_link=issue_no&h_action=');
$$$        });
$$$
$$$        newTd.appendChild(newBtn);
$$$        newTd.appendChild(textArea);
$$$      }
$$$
$$$      console.log('** Styles successfully aplied.');
$$$  //};


// ==UserScript==
// @name         TypeScript Docs
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  try to take over the world!
// @author       You
// @match        https://www.typescriptlang.org/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    function appendCss(css) {
        var cssElement = document.createElement('style');
        cssElement.innerText = css;
        document.head.appendChild(cssElement);
    }

    appendCss(`
        /*
        .in-doc-anchor::after {
            content: " ►";
        }
         */

        .in-doc-anchor {
            color: #265988;
            padding-left: 3px;
            padding-right: 3px;
            border-radius: 4px;
            background-color: #e6e6e6;
        }
    `);

    function addAnchorClass(element) {
        if (element.nodeName == 'A') {
            element.classList.add('in-doc-anchor');

            // The ► character added to the end of a link as opposed to the ::after pseudo element
            // helps to fing a link by browser find functionality.
            element.innerHTML += " ►";
        }
    }

    function styleAnchors(element) {
        for (var c in element.children) {
            var current = element.children[c];
            addAnchorClass(current);

            // Recursive call.
            styleAnchors(current);
        }
    }

    var docContent = document.getElementsByClassName('doc-content-container')[0].children[2];

    styleAnchors(docContent);
})();



// ==UserScript==
// @name         RP5 Weather
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  try to take over the world!
// @author       You
// @match        http://rp5.ua/Weather_in_Lviv_(airport)
//               http://rp5.ua/%D0%9F%D0%BE%D0%B3%D0%BE%D0%B4%D0%B0_%D1%83_%D0%9B%D1%8C%D0%B2%D0%BE%D0%B2%D1%96_(%D0%B0%D0%B5%D1%80%D0%BE%D0%BF%D0%BE%D1%80%D1%82)
//               http://rp5.ua/Погода_у_Львові_(аеропорт)
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    function appendCss (css) {
        var cssElement = document.createElement('style');
        cssElement.innerText = css;
        document.head.appendChild(cssElement);
    }

    appendCss(`
.z {
    font-size: 7pt;
}
.z::after {
    content: ":00";
}
td > div > b {
    font-weight: 100;
}
`);

    var weatherTable = document.getElementById('forecastTable');
    var timeCells = weatherTable.children[0].children[1].children;

    for (var i = 1; i < timeCells.length; i++) {
        timeCells[i].classList.add("z");
    }

    var row1 = 5, // 4
        row2 = 6; // 5
    var table = document.getElementById('forecastTable');
    for (var i = 1; i < table.children[0].children[row1].children.length; i++) {
        table.children[0].children[row1].children[i].style['font-size']='12pt';
    }
    for (var i = 1; i < table.children[0].children[row2].children.length; i++) {
        table.children[0].children[row2].children[i].style['font-size']='8pt';
    }

    // Your code here...
})();


// ==UserScript==
// @name         Sinoptik
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  try to take over the world!
// @author       You
// @match        https://ua.sinoptik.ua/%D0%BF%D0%BE%D0%B3%D0%BE%D0%B4%D0%B0-%D0%BB%D1%8C%D0%B2%D1%96%D0%B2*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Open site with some date manually using url like this one:
    // https://ua.sinoptik.ua/погода-львів/2019-03-28

    window.onload = function() {
        var xhr = new XMLHttpRequest();
        // xhr.open('GET', 'https://ua.sinoptik.ua/погода-львів/');
        xhr.open('GET', document.URL);
        xhr.onreadystatechange = function() { //Call a function when the state changes.
            if(xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) {
              document.body.innerHTML = xhr.response;
              console.log('** Loaded...');
            }
        };
        console.log('** Started loading...');
        xhr.send();
    };

    // Your code here...
})();


//
//
//

// ==UserScript==
// @name         KredoBank API
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  try to take over the world!
// @author       You
// @match        https://kredobank.com.ua/*
// @grant        none
//
// ==/UserScript==

(function() {
    'use strict';

    var pluginCss =
`
.helperzz {
    height: 260px;
    background-color: #99ccff;
    padding: 5px;
}

.w {
    width: calc(100% - 10px);
}
.calculate-btn {
    background-color: #b3ffb3;
    padding: 2px;
}
`;

    var pluginHtml =
`
<div class="helperzz">
    <label for="price">Price, $:</label>
    <input type="text" id="price" value="29000" onkeyup="window.helper.calculateUAH()">
    <label for="clientMoney">Client momey, $:</label>
    <input type="text" id="clientMoney" value="17800" onkeyup="window.helper.calculateUAH()">
    <label for="exchangeRate">Exchange rate:</label>
    <input type="text" id="exchangeRate" value="27.3" onkeyup="window.helper.calculateUAH()">
    <br>
    <label for="priceUAH">Price, ₴:</label>
    <input type="text" id="priceUAH">
    <label for="clientMoneyUAH">Client momey, ₴:</label>
    <input type="text" id="clientMoneyUAH">
    <br>
    <label for="period">Period (months):</label>
    <input type="text" id="period" value="60">
    <br>
    <button class="calculate-btn" onclick="window.helper.process()">Calculate</button>
    <br>
    <textarea id="results" style="resize: both; width: 60%; height: 120px;"></textarea>
</div>
`;

    function insertBefore(newNode, referenceNode) {
        referenceNode.parentNode.insertBefore(newNode, referenceNode);
    }

    function insertAfter(newNode, referenceNode) {
        referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
    }

    function Helper() {

        // Configurations.
        var stopSearchStr = "нічого не знайдено";

        // Main functionality.
        var that = this;

        this.resultsEl = null;
        this.priceEl = null;
        this.clientMoneyEl = null;
        this.priceUAHEl = null;
        this.clientMoneyUAHEl = null;
        this.exchangeRateEl = null;
        this.periodEl = null;


        this.run = function(html, insertPlace) {
            console.log('** Adding plugin...');

            var plugin = document.createElement('div');
            plugin.id = 'plugindiv';
            plugin.innerHTML = html;

            if (insertPlace) {
                if (insertPlace.before) {
                    insertBefore(plugin, insertPlace.before);
                }
                else if (insertPlace.after) {
                    insertAfter(plugin, insertPlace.after);
                }
            }
            else {
                document.body.appendChild(plugin);
            }

            that.priceEl = document.getElementById('price');
            that.clientMoneyEl = document.getElementById('clientMoney');
            that.priceUAHEl = document.getElementById('priceUAH');
            that.clientMoneyUAHEl = document.getElementById('clientMoneyUAH');
            that.exchangeRateEl = document.getElementById('exchangeRate');
            that.periodEl = document.getElementById('period');
            that.resultsEl = document.getElementById('results');

            this.calculateUAH();

            console.log('** Plugin added. (' + new Date() + ')');
        };

        this.appendCss = function (css) {
            var cssElement = document.createElement('style');
            cssElement.innerText = css;
            document.head.appendChild(cssElement);
        };

        this.process = function() {
            console.log('** Processing started...');

            var that = this;

            var priceUSD = parseFloat(that.priceEl.value);
            var clientMoneyUSD = parseFloat(that.clientMoneyEl.value);
            var exchangeRate = parseFloat(that.exchangeRateEl.value);
            var period = parseFloat(that.periodEl.value);

            var priceUAH = priceUSD * exchangeRate;
            var clientMoneyUAH = clientMoneyUSD * exchangeRate;

            that.resultsEl.value = '...';

            var xhttp = new XMLHttpRequest();
            xhttp.open('POST', 'https://kredobank.com.ua/api/calculator/25');
            xhttp.withCredentials = true;
            xhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded; charset=UTF-8');

            xhttp.onreadystatechange = function() { //Call a function when the state changes.
                if(xhttp.readyState == XMLHttpRequest.DONE && xhttp.status == 200) {
                    var result = that.parseResults(xhttp.response, period, exchangeRate, priceUSD, clientMoneyUSD);
                    that.resultsEl.value = result;
                }
            }

            var queryStr = 'PRICE=' + priceUAH + '&UVK=' + clientMoneyUAH + '&TERM=' + period;
            console.log(queryStr);

            xhttp.send(queryStr);
        };

        this.parseResults = function(resultStr, period, exchangeRate, priceUSD, clientMoneyUSD) {
            var result = '';
            var resultObj = JSON.parse(resultStr);

            var monthPaymentUSD = resultObj.res.data.annuity.annuity.month_payment_res.value[0] / exchangeRate;
            var monthPaymentUAH = resultObj.res.data.annuity.annuity.month_payment_res.value[0];
            var totalPaymentsUSD = resultObj.res.data.annuity.annuity.month_payment_res.value[0] * period / exchangeRate;
            var totalPaymentsUAH = resultObj.res.data.annuity.annuity.month_payment_res.value[0] * period;
            var overpaymentUSD = totalPaymentsUSD - (priceUSD - clientMoneyUSD);
            var overpaymentUAH = totalPaymentsUAH - (priceUSD - clientMoneyUSD) * exchangeRate;

            result = 'Credit, $\tPrice, $\tPrice, ₴\tMonths\tOwn, $\tOwn, ₴\t'
                     + 'Month, $\tMonth, ₴\tTotal, $\tTotal, ₴\tOverpay., $\tOverpay., ₴\n'

                     + (priceUSD - clientMoneyUSD) + '\t'
                     + Math.round(priceUSD) + '\t'
                     + Math.round(priceUSD * exchangeRate) + '\t'
                     + period + '\t'
                     + clientMoneyUSD + '\t'
                     + clientMoneyUSD * exchangeRate + '\t'

                     + Math.round(monthPaymentUSD) + '\t'
                     + Math.round(monthPaymentUAH) + '\t'
                     + Math.round(totalPaymentsUSD) + '\t'
                     + Math.round(totalPaymentsUAH) + '\t'
                     + Math.round(overpaymentUSD) + '\t'
                     + Math.round(overpaymentUAH);

            return result;
        };

        this.calculateUAH = function() {
            console.log('keydown...');
            var price = parseFloat(that.priceEl.value);
            var clientMoney = parseFloat(that.clientMoneyEl.value);
            var rate = parseFloat(that.exchangeRateEl.value);

            if (isNaN(price)) {
                that.priceUAHEl.value = '0';
            }
            else if (!isNaN(rate)) {
                that.priceUAHEl.value = Math.round(price * rate);
            }

            if (isNaN(clientMoney)) {
                that.clientMoneyUAHEl.value = '0';
            }
            else if (!isNaN(rate)) {
                that.clientMoneyUAHEl.value = Math.round(clientMoney * rate);
            }

            if (isNaN(rate)) {
                that.priceUAHEl.value = '0';
                that.lientMoneyUAHEl.value = '0';
            }
        }
    }

    var h = new Helper();
    h.run(pluginHtml);
    h.appendCss(pluginCss);

    // Remove topmost div.
    setTimeout(function() {
        var q = document.getElementsByClassName('loader-site')
        q[0].parentElement.removeChild(q[0]);
    }, 1000);

    window.helper = h;
    // Your code here...
})();
